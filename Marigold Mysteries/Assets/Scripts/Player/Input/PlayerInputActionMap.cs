//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Scripts/Player/PlayerInputActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionMap"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""fc97079d-58a0-4027-bb89-4007fb758461"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""18acf59d-4a6e-40e5-9a7f-68d5ff1ed84a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9dacb6a0-1ead-4f7a-bc66-fdbbfef0e17b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""00052402-095f-4ce8-8d4d-78904122d7b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ef3fdce0-a6f1-42ba-8c4a-5a4c03a7cc9e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59e18107-2303-4aa2-8a9d-a11d7e24e9ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""10cf29d9-285d-4c2c-b677-c8596a91d268"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Notebook"",
            ""id"": ""83fd1c29-7843-4965-80fd-dcd4f2bfd4a6"",
            ""actions"": [
                {
                    ""name"": ""LeftPageTurn"",
                    ""type"": ""Button"",
                    ""id"": ""62c897a9-191d-468f-8586-e4408e301e4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPageTurn"",
                    ""type"": ""Button"",
                    ""id"": ""8655577f-27af-4ab6-8d73-8dceb2e170a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d3dd2e7-a8a6-4bb7-8255-5c9482554f48"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPageTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50c4ae17-6ce0-4c01-a2c2-577eef566e14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPageTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpellCasting"",
            ""id"": ""f95ab6f5-594d-4323-8c6c-484d58818010"",
            ""actions"": [
                {
                    ""name"": ""SpellUp"",
                    ""type"": ""Button"",
                    ""id"": ""1a86b435-1d80-4d07-ab02-e7ce626f0ffd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellDown"",
                    ""type"": ""Button"",
                    ""id"": ""ea090755-3356-4dbe-aecc-dc57887acd12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a09748e0-b701-4fa6-8420-c48e9db0be7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellRight"",
                    ""type"": ""Button"",
                    ""id"": ""1ef534e0-f203-4343-81b3-a2ce150b2485"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c0836c2-5367-446e-81aa-21e5e8c1b0d2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78222db1-9aca-4ada-95a7-cafe324b2697"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8004a608-ff22-4429-8be6-edc06147ec32"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5303fd9-9705-4e78-8c2b-5448e1b178fb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Triggers"",
            ""id"": ""eeb1887e-71b4-4039-9e99-6b60db25f988"",
            ""actions"": [
                {
                    ""name"": ""SpellcastingModeToggle"",
                    ""type"": ""Button"",
                    ""id"": ""1c0c138c-c55a-41d5-8720-1c3c5633c248"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NotebookModeToggle"",
                    ""type"": ""Button"",
                    ""id"": ""36b6f78a-41c3-48b4-a315-a8082cf704bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractionAttempt"",
                    ""type"": ""Button"",
                    ""id"": ""1679b6f3-402d-4049-b063-d9d3f9b32b26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e957c935-892e-423b-95ca-d816bee91526"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellcastingModeToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b71d8d7d-56a1-4576-ada4-b20444afa221"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NotebookModeToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8a49789-0026-4abe-b478-d3eb3781d3a5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractionAttempt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Notebook
        m_Notebook = asset.FindActionMap("Notebook", throwIfNotFound: true);
        m_Notebook_LeftPageTurn = m_Notebook.FindAction("LeftPageTurn", throwIfNotFound: true);
        m_Notebook_RightPageTurn = m_Notebook.FindAction("RightPageTurn", throwIfNotFound: true);
        // SpellCasting
        m_SpellCasting = asset.FindActionMap("SpellCasting", throwIfNotFound: true);
        m_SpellCasting_SpellUp = m_SpellCasting.FindAction("SpellUp", throwIfNotFound: true);
        m_SpellCasting_SpellDown = m_SpellCasting.FindAction("SpellDown", throwIfNotFound: true);
        m_SpellCasting_SpellLeft = m_SpellCasting.FindAction("SpellLeft", throwIfNotFound: true);
        m_SpellCasting_SpellRight = m_SpellCasting.FindAction("SpellRight", throwIfNotFound: true);
        // Triggers
        m_Triggers = asset.FindActionMap("Triggers", throwIfNotFound: true);
        m_Triggers_SpellcastingModeToggle = m_Triggers.FindAction("SpellcastingModeToggle", throwIfNotFound: true);
        m_Triggers_NotebookModeToggle = m_Triggers.FindAction("NotebookModeToggle", throwIfNotFound: true);
        m_Triggers_InteractionAttempt = m_Triggers.FindAction("InteractionAttempt", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerInputActionMap m_Wrapper;
        public MovementActions(@PlayerInputActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Notebook
    private readonly InputActionMap m_Notebook;
    private List<INotebookActions> m_NotebookActionsCallbackInterfaces = new List<INotebookActions>();
    private readonly InputAction m_Notebook_LeftPageTurn;
    private readonly InputAction m_Notebook_RightPageTurn;
    public struct NotebookActions
    {
        private @PlayerInputActionMap m_Wrapper;
        public NotebookActions(@PlayerInputActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPageTurn => m_Wrapper.m_Notebook_LeftPageTurn;
        public InputAction @RightPageTurn => m_Wrapper.m_Notebook_RightPageTurn;
        public InputActionMap Get() { return m_Wrapper.m_Notebook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotebookActions set) { return set.Get(); }
        public void AddCallbacks(INotebookActions instance)
        {
            if (instance == null || m_Wrapper.m_NotebookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NotebookActionsCallbackInterfaces.Add(instance);
            @LeftPageTurn.started += instance.OnLeftPageTurn;
            @LeftPageTurn.performed += instance.OnLeftPageTurn;
            @LeftPageTurn.canceled += instance.OnLeftPageTurn;
            @RightPageTurn.started += instance.OnRightPageTurn;
            @RightPageTurn.performed += instance.OnRightPageTurn;
            @RightPageTurn.canceled += instance.OnRightPageTurn;
        }

        private void UnregisterCallbacks(INotebookActions instance)
        {
            @LeftPageTurn.started -= instance.OnLeftPageTurn;
            @LeftPageTurn.performed -= instance.OnLeftPageTurn;
            @LeftPageTurn.canceled -= instance.OnLeftPageTurn;
            @RightPageTurn.started -= instance.OnRightPageTurn;
            @RightPageTurn.performed -= instance.OnRightPageTurn;
            @RightPageTurn.canceled -= instance.OnRightPageTurn;
        }

        public void RemoveCallbacks(INotebookActions instance)
        {
            if (m_Wrapper.m_NotebookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INotebookActions instance)
        {
            foreach (var item in m_Wrapper.m_NotebookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NotebookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NotebookActions @Notebook => new NotebookActions(this);

    // SpellCasting
    private readonly InputActionMap m_SpellCasting;
    private List<ISpellCastingActions> m_SpellCastingActionsCallbackInterfaces = new List<ISpellCastingActions>();
    private readonly InputAction m_SpellCasting_SpellUp;
    private readonly InputAction m_SpellCasting_SpellDown;
    private readonly InputAction m_SpellCasting_SpellLeft;
    private readonly InputAction m_SpellCasting_SpellRight;
    public struct SpellCastingActions
    {
        private @PlayerInputActionMap m_Wrapper;
        public SpellCastingActions(@PlayerInputActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpellUp => m_Wrapper.m_SpellCasting_SpellUp;
        public InputAction @SpellDown => m_Wrapper.m_SpellCasting_SpellDown;
        public InputAction @SpellLeft => m_Wrapper.m_SpellCasting_SpellLeft;
        public InputAction @SpellRight => m_Wrapper.m_SpellCasting_SpellRight;
        public InputActionMap Get() { return m_Wrapper.m_SpellCasting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpellCastingActions set) { return set.Get(); }
        public void AddCallbacks(ISpellCastingActions instance)
        {
            if (instance == null || m_Wrapper.m_SpellCastingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpellCastingActionsCallbackInterfaces.Add(instance);
            @SpellUp.started += instance.OnSpellUp;
            @SpellUp.performed += instance.OnSpellUp;
            @SpellUp.canceled += instance.OnSpellUp;
            @SpellDown.started += instance.OnSpellDown;
            @SpellDown.performed += instance.OnSpellDown;
            @SpellDown.canceled += instance.OnSpellDown;
            @SpellLeft.started += instance.OnSpellLeft;
            @SpellLeft.performed += instance.OnSpellLeft;
            @SpellLeft.canceled += instance.OnSpellLeft;
            @SpellRight.started += instance.OnSpellRight;
            @SpellRight.performed += instance.OnSpellRight;
            @SpellRight.canceled += instance.OnSpellRight;
        }

        private void UnregisterCallbacks(ISpellCastingActions instance)
        {
            @SpellUp.started -= instance.OnSpellUp;
            @SpellUp.performed -= instance.OnSpellUp;
            @SpellUp.canceled -= instance.OnSpellUp;
            @SpellDown.started -= instance.OnSpellDown;
            @SpellDown.performed -= instance.OnSpellDown;
            @SpellDown.canceled -= instance.OnSpellDown;
            @SpellLeft.started -= instance.OnSpellLeft;
            @SpellLeft.performed -= instance.OnSpellLeft;
            @SpellLeft.canceled -= instance.OnSpellLeft;
            @SpellRight.started -= instance.OnSpellRight;
            @SpellRight.performed -= instance.OnSpellRight;
            @SpellRight.canceled -= instance.OnSpellRight;
        }

        public void RemoveCallbacks(ISpellCastingActions instance)
        {
            if (m_Wrapper.m_SpellCastingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpellCastingActions instance)
        {
            foreach (var item in m_Wrapper.m_SpellCastingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpellCastingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpellCastingActions @SpellCasting => new SpellCastingActions(this);

    // Triggers
    private readonly InputActionMap m_Triggers;
    private List<ITriggersActions> m_TriggersActionsCallbackInterfaces = new List<ITriggersActions>();
    private readonly InputAction m_Triggers_SpellcastingModeToggle;
    private readonly InputAction m_Triggers_NotebookModeToggle;
    private readonly InputAction m_Triggers_InteractionAttempt;
    public struct TriggersActions
    {
        private @PlayerInputActionMap m_Wrapper;
        public TriggersActions(@PlayerInputActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpellcastingModeToggle => m_Wrapper.m_Triggers_SpellcastingModeToggle;
        public InputAction @NotebookModeToggle => m_Wrapper.m_Triggers_NotebookModeToggle;
        public InputAction @InteractionAttempt => m_Wrapper.m_Triggers_InteractionAttempt;
        public InputActionMap Get() { return m_Wrapper.m_Triggers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggersActions set) { return set.Get(); }
        public void AddCallbacks(ITriggersActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggersActionsCallbackInterfaces.Add(instance);
            @SpellcastingModeToggle.started += instance.OnSpellcastingModeToggle;
            @SpellcastingModeToggle.performed += instance.OnSpellcastingModeToggle;
            @SpellcastingModeToggle.canceled += instance.OnSpellcastingModeToggle;
            @NotebookModeToggle.started += instance.OnNotebookModeToggle;
            @NotebookModeToggle.performed += instance.OnNotebookModeToggle;
            @NotebookModeToggle.canceled += instance.OnNotebookModeToggle;
            @InteractionAttempt.started += instance.OnInteractionAttempt;
            @InteractionAttempt.performed += instance.OnInteractionAttempt;
            @InteractionAttempt.canceled += instance.OnInteractionAttempt;
        }

        private void UnregisterCallbacks(ITriggersActions instance)
        {
            @SpellcastingModeToggle.started -= instance.OnSpellcastingModeToggle;
            @SpellcastingModeToggle.performed -= instance.OnSpellcastingModeToggle;
            @SpellcastingModeToggle.canceled -= instance.OnSpellcastingModeToggle;
            @NotebookModeToggle.started -= instance.OnNotebookModeToggle;
            @NotebookModeToggle.performed -= instance.OnNotebookModeToggle;
            @NotebookModeToggle.canceled -= instance.OnNotebookModeToggle;
            @InteractionAttempt.started -= instance.OnInteractionAttempt;
            @InteractionAttempt.performed -= instance.OnInteractionAttempt;
            @InteractionAttempt.canceled -= instance.OnInteractionAttempt;
        }

        public void RemoveCallbacks(ITriggersActions instance)
        {
            if (m_Wrapper.m_TriggersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggersActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggersActions @Triggers => new TriggersActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface INotebookActions
    {
        void OnLeftPageTurn(InputAction.CallbackContext context);
        void OnRightPageTurn(InputAction.CallbackContext context);
    }
    public interface ISpellCastingActions
    {
        void OnSpellUp(InputAction.CallbackContext context);
        void OnSpellDown(InputAction.CallbackContext context);
        void OnSpellLeft(InputAction.CallbackContext context);
        void OnSpellRight(InputAction.CallbackContext context);
    }
    public interface ITriggersActions
    {
        void OnSpellcastingModeToggle(InputAction.CallbackContext context);
        void OnNotebookModeToggle(InputAction.CallbackContext context);
        void OnInteractionAttempt(InputAction.CallbackContext context);
    }
}
